#pragma once
/*
 My seven seg display info:
 W I R I N G   G U I D E


=== Common Anode digits ===
Arduino  Display  Digit
 9         12       0 Leftmost
 10         9       1
 11         8       2
 12         6       3 Rightmost
 
=== Cathode Segments ===
Teensy    GPIOD    Display   Segment  PCA9551
  2        0        11         A		LED0-pin4
  14       1        7          B		pin5
  7        2        4          C		pin6
  8        3        2          D		pin7
  6        4        1          E		pin9
  20       5        10         F		pin 10
  21       6        5          G		pin 11
  5        7        3         DEC  		pin 12

===Segment Layout===
    A
  F   B
    G
  E   C
    D   
              D C B A   . G F E 
segment code, --xx--xx, --xx--xx

i = 85, 84
2 = 11010000 , 01000100 = 16, 68
c = 00010101, 01000100 = 21, 68
//======================Non-blinking numbers					  
0, // = 00000000 = ---- 
1, // = 00000001 = ---x 
4, // = 00000100 = --x-
5, // = 00000101 = --xx	
16, // = 00010000 = -x--
17, // = 00010001 = -x-x
20, // = 00010100 = -xx-
21, // = 00010101 = -xxx
64, // = 01000000 = x---	
65, // = 01000001 = x--x			
68, // = 01000100 = x-x-
69, // = 01000101 = x-xx
80, // = 01010000 = xx--
81, // = 01010001 = xx-x
84, // = 01010100 = xxx-
85, // = 01010101 = xxxx
===Segment Layout===
    A
  F   B
    G
  E   C
    D   
              D C B A   . G F E 
segment code, --xx--xx, --xx--xx
//-=================================non blinking characters
00000000, 01010000 // 0 - 0, 80 = 0
01000001, 01010101 // 1 - 65, 85 = 1
00010000, 01000100 // 2 - 16, 68 = 2
00000000, 01000101 // 3 - 0, 69 = 3
01000001, 01000001 // 4 - 65, 65 = 4
00000100, 01000001 // 5 - 4, 65 = 5
00000100, 01000000 // 6 - 4, 64 = 6 
01000000, 01010101 // 7 - 64, 85 = 7
00000000, 01000000 // 8 - 0, 64 = 8
01000000, 01000001 // 9 - 64, 65 = 9
01000000, 01000000 // 10 - 64, 64 = A
00000101, 01000000 // 11 - 5, 64 = b
00010101, 01000100 // 12 - 21, 68 = c
00000001, 01000100 // 13 - 1, 68 = d
00010100, 01000000 // 14 - 20, 64 = E
01010100, 01000000 // 15 - 84, 64 = F
00000000, 01000001 // 16 - 0, 65 = g
01000101, 01000000 // 17 - 69, 64 = h
01010101, 01010100 // 18 - 85, 84 = i
00000001, 01010100 // 19 - 1, 84 = j
-k
00010101, 01010000 // 20 - 21, 80 = L
01000100, 01010100 // (21) - 68, 84 = m
01000101, 01000100 // 21 - 69, 68 = n
00000101, 01000100 // 22 -  5, 68 = o
01010000, 01000000 // 23 -  80, 64, P
01000000, 01000001 // 24 - 64, 65, q
01010101, 01000100 // 25 - 85, 68, r
00000100, 01000001 // 26 - 4, 65 = s = 5
00010101, 01000000 // 27 - 21, 64 = t
00000101, 01010100 // 28 - 5, 84 = u
-v
-w
-x
01000001, 01000001 // 29 - 65, 65 = y = 4
00010000, 01000100 // 30 - 16, 68 = z = 2
01010101, 01000101 // 31 - 85, 69 = "-" [dash]
00010101, 01010101 // 32 - 21, 85 = "_" [underscore]
01010100, 01010101 // 33 - 84, 85 = [top line]
01010101, 00010101 // 34 - 85, 21 = decimal only
01010101, 01010101 // 35(36) - 85,85 = off

//============================================BLINKING characters
11111111 - 255
11111101 - 253
11110111 - 247
11110101 - 245
11011111 - 223
11010111 - 215
11010101 - 213
01111111 - 127
01111101 - 125
01110111 - 119
01110101 - 117
01011111 - 95
01010111 - 87
01010101 - 85


//===============================================BLINKING characters
11111111, 01011111 // 0 - 255, 95 = 0
01111101, 01010101 // 1 - 125, 85 = 1
11011111, 01110111 // 2 - 223, 119 = 2
11111111, 01110101 // 3 - 255, 117 = 3
01111101, 01111101 // 4 - 125, 125 = 4
11110111, 01111101 // 5 - 247, 125 = 5
11110111, 01111111 // 6 - 247, 127 = 6 
01111111, 01010101 // 7 - 127, 85 = 7
11111111, 01111111 // 8 - 255, 127 = 8
01111111, 01111101 // 9 - 127, 125 = 9
01111111, 01111111 // 10 - 127, 127 = A
11110101, 01111111 // 11 - 245, 127 = b
11010101, 01110111 // 12 - 213, 119 = c
11111101, 01110111 // 13 - 253, 119 = d
11010111, 01111111 // 14 - 215, 127 = E
01010111, 01111111 // 15 - 87, 127 = F
11111111, 01111101 // 255 - 255, 125 = g
01110101, 01111111 // 17 - 117, 127 = h
01010101, 01010111 // 18 - 85, 87 = i
11111101, 01010111 // 19 - 253, 87 = j
-k
11010101, 01011111 // 20 - 213, 95 = L
01110111, 01010111 // (21) - 119, 87 = m
01110101, 01110111 // 21 - 117, 119 = n
11110101, 01110111 // 22 -  245, 119 = o
01011111, 01111111 // 23 -  95, 127, P
01111111, 01111101 // 24 - 127, 125, q
01010101, 01110111 // 25 - 85, 119, r
11110111, 01111101 // 26 - 247, 125 = s = 5
11010101, 01111111 // 27 - 213, 127 = t
11110101, 01010111 // 28 - 245, 87 = u
-v
-w
-x
01111101, 01111101 // 29 - 125, 125 = y = 4
11011111, 01110111 // 30 - 223, 119 = z = 2
01010101, 01110101 // 31 - 85, 117 = "-" [dash]
11010101, 01010101 // 32 - 213, 85 = "_" [underscore]
01010111, 01010101 // 33 - 87, 85 = [top line]
01010101, 11010101 // 34 - 85, 213 = decimal only
01010101, 01010101 // 35(36) - 85, 85 = off

//just numbers and off
//			  0   1   2   3  4  5  6  7   8   9  off
byte seg0 []{ 0, 65, 16, 0, 65, 4, 4, 64, 0, 64, 85 };
byte seg1 []{ 80, 85, 68, 69, 65, 65, 64, 85, 64, 65, 85}

//psc1 00010011 = 19
//pwm1 00010100 = 20

*/
// normal operation
//             0    1   2  3   4   5   6    7   8   9   A  b    c   d  E    F   g  h   i   j   L   m    n  o   p   q   r   s   t   u   y   Z   -    _   ^   .  " "
byte seg0 [] { 0,  65, 16, 0,  65, 4,  4,  64, 0,  64, 64, 5,  21, 1,  20, 84, 0,  69, 85, 1,  21, 68, 69, 5,  80, 64, 85, 4,  21, 5,  65, 16, 85, 21, 84, 85, 85 };
byte seg1 [] { 80, 85, 68, 69, 65, 65, 64, 85, 64, 65, 64, 64, 68, 68, 64, 64, 65, 64, 84, 84, 80, 84, 68, 68, 64, 65, 68, 65, 64, 84, 65, 68, 69, 85, 85, 21, 85};

//blink
//                  0    1    2    3    4    5    6    7    8    9    A    b    c    d    E    F    g    h    i   j    L    m    n    o    p    q   r     s   t     u    y    Z    																																											 -   _  ^  . " "
byte segBlink0 [] {255, 125, 223, 255, 125, 247, 247, 127, 255, 127, 127, 245, 213, 253, 215, 87,  255, 117, 85, 253, 213, 119, 117, 245, 95,  127, 85,  247, 213, 245, 125, 223, 85,  213, 87, 85,  85 };
byte segBlink1 [] {95,  85,  119, 117, 125, 125, 127, 85,  127, 125, 127, 127, 119, 119, 127, 127, 125, 127, 87, 87,  95,  87,  119, 119, 127, 125, 119, 125, 127, 87,  125, 119, 117, 85,  85, 213, 85 };




