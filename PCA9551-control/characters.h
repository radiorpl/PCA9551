#pragma once
/*
 My seven seg display info:
 W I R I N G   G U I D E


=== Common Anode digits ===
Arduino  Display  Digit
 9         12       0 Leftmost
 10         9       1
 11         8       2
 12         6       3 Rightmost
 
=== Cathode Segments ===
Teensy    GPIOD    Display   Segment  PCA9551
  2        0        11         A		LED0-pin4
  14       1        7          B		pin5
  7        2        4          C		pin6
  8        3        2          D		pin7
  6        4        1          E		pin9
  20       5        10         F		pin 10
  21       6        5          G		pin 11
  5        7        3         DEC  		pin 12

===Segment Layout===
    A
  F   B
    G
  E   C
    D   
              D C B A   . G F E 
segment code, --xx--xx, --xx--xx

i = 85, 84
2 = 00010000 , 01000100 = 16, 68
c = 00010101, 01000100 = 21, 68
					  
0, // = 00000000 = ---- 
1, // = 00000001 = ---x 
4, // = 00000100 = --x-
5, // = 00000101 = --xx	
16, // = 00010000 = -x--
17, // = 00010001 = -x-x
20, // = 00010100 = -xx-
21, // = 00010101 = -xxx
64, // = 01000000 = x---	
65, // = 01000001 = x--x			
68, // = 01000100 = x-x-
69, // = 01000101 = x-xx
80, // = 01010000 = xx--
81, // = 01010001 = xx-x
84, // = 01010100 = xxx-
85, // = 01010101 = xxxx
===Segment Layout===
    A
  F   B
    G
  E   C
    D   
              D C B A   . G F E 
segment code, --xx--xx, --xx--xx

00000000, 01010000 // 0 - 0, 80 = 0
01000001, 01010101 // 1 - 65, 85 = 1
00010000, 01000100 // 2 - 16, 68 = 2
00000000, 01000101 // 3 - 0, 69 = 3
01000001, 01000001 // 4 - 65, 65 = 4
00000100, 01000001 // 5 - 4, 65 = 5
00000100, 01000000 // 6 - 4, 64 = 6 
01000000, 01010101 // 7 - 64, 85 = 7
00000000, 01000000 // 8 - 0, 64 = 8
01000000, 01000001 // 9 - 64, 65 = 9



01000000, 01000000 // 10 - 64, 64 = A
00000101, 01000000 // 11 - 5, 64 = b
00010101, 01000100 // 12 - 21, 68 = c
00000001, 01000100 // 13 - 1, 68 = d
00010100, 01000000 // 14 - 20, 64 = E
01010100, 01000000 // 15 - 84, 64 = F
00000000, 01000001 // 16 - 0, 65 = g
01000101, 01000000 // 17 - 69, 64 = h
01010101, 01010100 // 18 - 85, 84 = i
00000001, 01010100 // 19 - 1, 84 = j
-k
00010101, 01010000 // 20 - 21, 80 = L
01000100, 01010100 // (21) - 68, 84 = m




01000101, 01000100 // 21 - 69, 68 = n
00000101, 01000100 // 22 -  5, 68 = o
01010000, 01000000 // 23 -  80, 64, P
01000000, 01000001 // 24 - 64, 65, q
01010101, 01000100 // 25 - 85, 68, r
00000100, 01000001 // 26 - 4, 65 = s = 5
00010101, 01000000 // 27 - 21, 64 = t
00000101, 01010100 // 28 - 5, 84 = u
-v
-w
-x
01000001, 01000001 // 29 - 65, 65 = y = 4
00010000, 01000100 // 30 - 16, 68 = z = 2
01010101, 01000101 // 31 - 85, 69 = "-" [dash]
00010101, 01010101 // 32 - 21, 85 = "_" [underscore]
01010100, 01010101 // 33 - 84, 85 = [top line]
01010101, 00010101 // 34 - 85, 21 = decimal only
01010101, 01010101 // 35(36) - 85,85 = off

//just numbers and off
//			  0   1   2   3  4  5  6  7   8   9  off
byte seg0 []{ 0, 65, 16, 0, 65, 4, 4, 64, 0, 64, 85 };
byte seg1 []{ 80, 85, 68, 69, 65, 65, 64, 85, 64, 65, 85}

*/
//             0    1   2  3   4   5   6    7   8   9   A  b    c   d  E    F   g  h   i   j   L   m    n  o   p   q   r   s   t   u   y   Z   -    _   ^   .  " "
byte seg0 [] { 0,  65, 16, 0,  65, 4,  4,  64, 0,  64, 64, 5,  21, 1,  20, 84, 0,  69, 85, 1,  21, 68, 69, 5,  80, 64, 85, 4,  21, 5,  65, 16, 85, 21, 84, 85, 85 };
byte seg1 [] { 80, 85, 68, 69, 65, 65, 64, 85, 64, 65, 64, 64, 68, 68, 64, 64, 65, 64, 84, 84, 80, 84, 68, 68, 64, 65, 68, 65, 64, 84, 65, 68, 69, 85, 85, 21, 85};
